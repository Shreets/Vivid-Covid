{"version":3,"sources":["container/asset/locate.png","container/asset/logo.png","container/asset/chart.png","container/asset/hover.png","container/nav/nav.js","container/stats/stats.js","container/map/map.js","container/map/mapCase.js","container/footer/footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Nav","props","className","src","Logo","alt","onClick","recoverSelect","Chart","Stats","confirm","date","recover","Map","useState","latitude","longitude","zoom","viewport","setViewport","locate","setLocate","selectPin","setSlectPin","pop","setPop","getLocation","a","fetch","response","json","data","checkPop","undefined","location","map","countryRegion","lat","long","useEffect","style","width","height","mapStyle","accessToken","onViewportChange","key","combinedKey","Pin","onMouseOver","e","preventDefault","onMouseOut","onClose","confirmed","recovered","MapCase","country","FormControl","NativeSelect","defaultValue","onChange","select","countryOption","i","value","Footer","dialogVisible","setDialogVisible","dialog","href","target","App","url","setCountry","setCountryOption","setConfirmed","setRecovered","setDate","dateStr","Date","dateFormat","getDate","getMonth","getFullYear","fetchData","lastUpdate","console","log","fetchSelectedData","getCountries","fetchCountry","countries","name","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d787bd1e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/locate.8fe3dbf2.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.90f98b6e.png\";","module.exports = __webpack_public_path__ + \"static/media/chart.f12357eb.png\";","module.exports = __webpack_public_path__ + \"static/media/hover.7148e7f5.png\";","import React from \"react\";\r\nimport \"./nav.css\";\r\nimport Logo from \"../asset/logo.png\";\r\nimport Chart from \"../asset/chart.png\";\r\nimport hover from \"../asset/hover.png\";\r\n\r\nconst Nav = (props) => {\r\n  return (\r\n    <div className=\"nav-wrapper\">\r\n      <div className=\"logo\">\r\n        <img src={Logo} alt=\"logo\" />\r\n      </div>\r\n\r\n      <div className=\"tabs\">\r\n        <span className=\"tab-span\">\r\n          <a onClick={props.recoverSelect}>RECOVERY</a>\r\n        </span>\r\n        <span className=\"img-span\">\r\n          <img src={Chart} alt=\"chart logo\" className=\"chart-logo\"></img>\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Nav;\r\n","import React from \"react\";\r\nimport \"./stats.css\";\r\n// import CountUp from \"react-countup\";\r\nimport AnimatedNumber from \"animated-number-react\";\r\n\r\nconst Stats = (props) => {\r\n  return (\r\n    <div className=\"stat-wrapper\">\r\n      <div className=\"infected\">\r\n        <div className=\"title\"> Confirmed : </div>\r\n        <div className=\"numbers\">\r\n          {props.confirm}\r\n          {/* <CountUp start={0} end={props.confirm} duration={1.5} separator=\",\" /> */}\r\n        </div>\r\n        <div className=\"date\">Recent updated: {props.date}</div>\r\n      </div>\r\n      <div className=\"recovered\">\r\n        <div className=\"title\"> Recovered : </div>\r\n        <div className=\"numbers\">\r\n          {props.recover}\r\n          {/* <CountUp start={0} end={props.recover} duration={1.5} separator=\",\" /> */}\r\n        </div>\r\n        <div className=\"date\">Recent updated: {props.date}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Stats;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ReactMapGL, { Marker, Popup } from \"@urbica/react-map-gl\";\r\nimport Pin from \"../asset/locate.png\";\r\nimport \"./mapCase.css\";\r\n\r\nconst Map = (props) => {\r\n  const [viewport, setViewport] = useState({\r\n    latitude: 36,\r\n    longitude: 16,\r\n    zoom: 1.5,\r\n  });\r\n  const [locate, setLocate] = useState([]);\r\n  const [selectPin, setSlectPin] = useState(null);\r\n  const [pop, setPop] = useState(false);\r\n\r\n  const getLocation = async () => {\r\n    const response = await fetch(\"https://covid19.mathdro.id/api/recovered\");\r\n    const data = await response.json();\r\n    setLocate(data);\r\n  };\r\n\r\n  const updateView = () => {\r\n    return locate.map((data) => {\r\n      if (props.location === data.countryRegion) {\r\n        setViewport({\r\n          latitude: data.lat,\r\n          longitude: data.long,\r\n          zoom: 4,\r\n        });\r\n        setSlectPin(data);\r\n      }\r\n    });\r\n  };\r\n\r\n  const checkPop = () => {\r\n    if (props.location !== undefined) {\r\n      setPop(true);\r\n\r\n      updateView();\r\n    } else {\r\n      setPop(false);\r\n      setViewport({\r\n        latitude: 36,\r\n        longitude: 16,\r\n        zoom: 1.5,\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getLocation();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    checkPop();\r\n  }, [props.location]);\r\n\r\n  const popReturn = () => {\r\n    return (\r\n      <div>\r\n        <ReactMapGL\r\n          style={{ width: \"100%\", height: \"88vh\" }}\r\n          mapStyle=\"mapbox://styles/mapbox/light-v9\"\r\n          accessToken={\r\n            \"pk.eyJ1Ijoic2hyZWV0cyIsImEiOiJjazlqa240NjIwOTY5M2hwOGNmbTE2YTc1In0.oF-rBv3-aKL90FnHJPDHSQ\"\r\n          }\r\n          latitude={viewport.latitude}\r\n          longitude={viewport.longitude}\r\n          zoom={viewport.zoom}\r\n          onViewportChange={setViewport}\r\n        >\r\n          {locate.map((data) => (\r\n            <Marker\r\n              key={data.combinedKey}\r\n              latitude={data.lat}\r\n              longitude={data.long}\r\n            >\r\n              <div>\r\n                <img\r\n                  className=\"pin\"\r\n                  src={Pin}\r\n                  onMouseOver={(e) => {\r\n                    e.preventDefault();\r\n                    setSlectPin(data);\r\n                  }}\r\n                  onMouseOut={(e) => {\r\n                    e.preventDefault();\r\n                    setSlectPin(null);\r\n                  }}\r\n                />\r\n              </div>\r\n            </Marker>\r\n          ))}\r\n          {selectPin || (pop && selectPin) ? (\r\n            <Popup\r\n              latitude={selectPin.lat}\r\n              longitude={selectPin.long}\r\n              onClose={() => {\r\n                setSlectPin(null);\r\n              }}\r\n            >\r\n              <div className=\"pin-info\">\r\n                <span className=\"pin-name\">{selectPin.combinedKey}</span>\r\n                <br />\r\n                <span className=\"pin-confirm\">\r\n                  Confirmed : {selectPin.confirmed}\r\n                </span>\r\n                <br />\r\n                <span className=\"pin-recover\">\r\n                  Recovered : {selectPin.recovered}\r\n                </span>\r\n              </div>\r\n            </Popup>\r\n          ) : null}\r\n        </ReactMapGL>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return popReturn();\r\n};\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\nimport \"./mapCase.css\";\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\nimport Map from \"./map\";\r\nimport ReactMapGL, { Marker, Popup } from \"@urbica/react-map-gl\";\r\nimport Pin from \"../asset/locate.png\";\r\n\r\nconst MapCase = (props) => {\r\n  return (\r\n    <div className=\"map-wrapper\">\r\n      <div className=\"frame\">\r\n        <Map location={props.country} recoverSelect={props.recoverSelect} />\r\n      </div>\r\n      <div className=\"search\">\r\n        <FormControl className=\"form__input\">\r\n          <NativeSelect defaultValue=\"\" onChange={props.select}>\r\n            <option onClick={props.recoverSelect}>\r\n              -- Search by Country --\r\n            </option>\r\n            {props.countryOption.map((country, i) => (\r\n              <option key={i} value={country}>\r\n                {country}\r\n              </option>\r\n            ))}\r\n          </NativeSelect>\r\n        </FormControl>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapCase;\r\n","import React, { useState } from \"react\";\r\nimport \"./footer.css\";\r\n\r\nconst Footer = (props) => {\r\n  const [dialogVisible, setDialogVisible] = useState(false);\r\n  const dialog = (\r\n    <div className=\"dialogBackdrop\">\r\n      <div className=\"dialogContainer\">\r\n        <div>\r\n          {\" \"}\r\n          At times like this when all you see and hear of is how the COVID-19\r\n          virus is spreading faster than wild fire, I felt like I would rather\r\n          prefer turning up to a source which would only give me the Good News ,\r\n          i.e of patient recoveries.\r\n          <br />\r\n          The API derives data provided by John Hopkins. Although the numbers\r\n          provided are accurate and up to date, provinces of a country or a\r\n          territoryunder ceratin country's rule is also shown as the country\r\n          itself in the map. These will be taken care of upon gaining acces to a\r\n          better (yet free) API.\r\n          <br />\r\n          <span>\r\n            **This is a Test version. Further updates will be made soon.\r\n          </span>{\" \"}\r\n        </div>\r\n        <div>\r\n          <button\r\n            onClick={() => {\r\n              setDialogVisible(false);\r\n            }}\r\n          >\r\n            Close\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n  return (\r\n    <div className=\"foot-wrapper\">\r\n      <div className=\"created\">\r\n        Copyright © 2020{\" \"}\r\n        <a href=\"https://github.com/Shreets?tab=repositories\" target=\"_blank\">\r\n          {\" \"}\r\n          Shreeti Upreti{\" \"}\r\n        </a>\r\n      </div>\r\n      <div className=\"info\">\r\n        <a onClick={() => setDialogVisible(true)}>ABOUT</a>\r\n      </div>\r\n      {dialogVisible && dialog}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Nav from \"./container/nav/nav\";\nimport Stats from \"./container/stats/stats\";\nimport MapCase from \"./container/map/mapCase\";\nimport Footer from \"./container/footer/footer\";\n// import Affected from \"./container/least-affected/least-affected\";\n\nfunction App() {\n  const url = \"https://covid19.mathdro.id/api\";\n  var months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n\n  const [country, setCountry] = useState();\n  const [countryOption, setCountryOption] = useState([]);\n  const [confirm, setConfirmed] = useState();\n  const [recover, setRecovered] = useState();\n  const [date, setDate] = useState();\n\n  const dateStr = new Date(date);\n  const dateFormat =\n    dateStr.getDate() +\n    \" \" +\n    months[dateStr.getMonth()] +\n    \" \" +\n    dateStr.getFullYear();\n\n  const fetchData = async () => {\n    try {\n      const response = await fetch(url);\n      const data = await response.json();\n      setConfirmed(data.confirmed.value);\n      setRecovered(data.recovered.value);\n      setDate(data.lastUpdate);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const fetchSelectedData = async () => {\n    try {\n      const response = await fetch(\n        `https://covid19.mathdro.id/api/countries/${country}`\n      );\n      const data = await response.json();\n      setConfirmed(data.confirmed.value);\n      setRecovered(data.recovered.value);\n      setDate(data.lastUpdate);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getCountries = async () => {\n    const response = await fetch(`${url}/countries`);\n    const data = await response.json();\n    const fetchCountry = data.countries.map((country) => country.name);\n    setCountryOption(fetchCountry);\n  };\n\n  useEffect(() => {\n    if (country === undefined) {\n      fetchData();\n    } else {\n      fetchSelectedData();\n    }\n  }, [country]);\n\n  useEffect(() => {\n    getCountries();\n  }, []);\n\n  const countrySelect = (e) => {\n    setCountry(e.target.value);\n  };\n\n  const recoverSelect = () => {\n    fetchData();\n    setCountry(undefined);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"nav\">\n        <Nav recoverSelect={recoverSelect} country={country} />\n      </div>\n\n      <div className=\"stats\">\n        <Stats confirm={confirm} recover={recover} date={dateFormat} />\n      </div>\n\n      <div className=\"map\">\n        <MapCase\n          url={url}\n          countryOption={countryOption}\n          select={countrySelect}\n          country={country}\n          recoverSelect={recoverSelect}\n        />\n      </div>\n      {/* \n      <div className=\"least-affected\">\n        <Affected />\n      </div> */}\n\n      <div className=\"footer\">\n        <footer>\n          <Footer />\n        </footer>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}